import{_ as t,c as a,o as e,a2 as i}from"./chunks/framework.C97HAg-e.js";const s="/tingshu/assets/image-20240710161443109.CkwUX3Wu.png",r="/tingshu/assets/391b5c9f.Drq6Ajd8.png",o="/tingshu/assets/b1c31a25.8BrKj0-1.png",d="/tingshu/assets/image-20240710162228146.DCz9WOXX.png",l="/tingshu/assets/image-20240710162359741.DnJecrft.png",n="/tingshu/assets/044c6449.B7uwcg6i.png",y=JSON.parse('{"title":"GettingStart","description":"","frontmatter":{},"headers":[],"relativePath":"01-GettingStart.md","filePath":"01-GettingStart.md"}'),c={name:"01-GettingStart.md"},p=i('<h1 id="gettingstart" tabindex="-1">GettingStart <a class="header-anchor" href="#gettingstart" aria-label="Permalink to &quot;GettingStart&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>对于基础开发环境，比如 MySQL、Redis 等等，在这里统一使用 Docker 容器，并且使用 docker-compose 进行容器编排。 因此，首先需要具备 docker 和 docker-compose 环境，这里不做赘述，详情参考 <a href="https://www.bilibili.com/video/BV1gr4y1U7CY/?spm_id_from=333.337.search-card.all.click" target="_blank" rel="noreferrer">尚硅谷 Docker 实战教程</a></p><p>当你运行 docker-compose 文件时，部分镜像可能失效造成容器无法运行，因此你可以将 compose 文件中的镜像根据需求替换</p></div><h2 id="本机环境" tabindex="-1">本机环境 <a class="header-anchor" href="#本机环境" aria-label="Permalink to &quot;本机环境&quot;">​</a></h2><p>硬件环境：笔记本（Arch Linux） + 台式机（Windows10），笔记本是Linux系统，负责编码开发以及运行Docker容器，台式机跑微信小程序进行测试。</p><p><img src="'+s+'" alt="image-20240710161443109"></p><h2 id="docker-容器" tabindex="-1">Docker 容器 <a class="header-anchor" href="#docker-容器" aria-label="Permalink to &quot;Docker 容器&quot;">​</a></h2><h3 id="mysql" tabindex="-1">MySQL <a class="header-anchor" href="#mysql" aria-label="Permalink to &quot;MySQL&quot;">​</a></h3><p>使用图形界面工具，执行 tingshu.sql 即可，里面包含所有的建库建表语句</p><h3 id="rabbitmq" tabindex="-1">RabbitMQ <a class="header-anchor" href="#rabbitmq" aria-label="Permalink to &quot;RabbitMQ&quot;">​</a></h3><ol><li>首先下载 rabbitmq_delayed_message_exchange-3.12.0.ez 文件上传到 RabbitMQ 所在服务器，<a href="https://www.rabbitmq.com/community-plugins.html" target="_blank" rel="noreferrer">下载地址</a></li><li>切换到插件所在目录，执行 <code>docker cp rabbitmq_delayed_message_exchange-3.12.0.ez ts-rabbitmq:/plugins</code> 命令，将刚插件拷贝到容器内 plugins 目录下</li><li>执行 <code>docker exec -it ts-rabbitmq /bin/bash</code> 命令进入到容器内部</li><li>执行 <code>cd plugins</code> 进入 plugins 目录, 然后执行 <code>ls -l|grep delay</code> 命令查看插件是否 copy 成功</li><li>在容器内 plugins 目录下，执行 <code>rabbitmq-plugins enable rabbitmq_delayed_message_exchange</code> 命令启用插件</li><li>exit 命令退出 RabbitMQ 容器内部，然后执行 <code>docker restart ts-rabbitmq</code> 命令重启 RabbitMQ 容器</li></ol><h3 id="redis" tabindex="-1">Redis <a class="header-anchor" href="#redis" aria-label="Permalink to &quot;Redis&quot;">​</a></h3><p><a href="https://redis.io/docs/latest/operate/oss_and_stack/management/config/" target="_blank" rel="noreferrer">官网</a> 下载对应版本配置文件，修改以下地方（行数可能不一致）：</p><ul><li>注释 87 行 <code>bind 127.0.0.1 -::1</code></li><li>111 行 <code>protected-mode</code> 修改为 yes</li><li>1036 行解开注释，设置密码，比如 <code>requirepass redis</code></li><li>1379 行 <code>appendonly</code> 修改为 no</li></ul><h3 id="minio" tabindex="-1">Minio <a class="header-anchor" href="#minio" aria-label="Permalink to &quot;Minio&quot;">​</a></h3><p>当实现文件上传接口后，获取返回的图片访问地址，无法访问的原因可能是 bucket 的权限未开放，默认权限是 <code>private</code>，将其修改为 <code>public</code> 即可在浏览器输入地址访问图片 <img src="'+r+'" alt=""><img src="'+o+'" alt=""></p><h3 id="mongodb" tabindex="-1">MongoDB <a class="header-anchor" href="#mongodb" aria-label="Permalink to &quot;MongoDB&quot;">​</a></h3><p>运行<code>docker-compose.yml</code>即可</p><h3 id="nacos" tabindex="-1">Nacos <a class="header-anchor" href="#nacos" aria-label="Permalink to &quot;Nacos&quot;">​</a></h3><p>运行<code>docker-compose.yml</code>即可</p><h3 id="sentinel" tabindex="-1">Sentinel <a class="header-anchor" href="#sentinel" aria-label="Permalink to &quot;Sentinel&quot;">​</a></h3><p>运行<code>docker-compose.yml</code>即可</p><h3 id="kafka" tabindex="-1">Kafka <a class="header-anchor" href="#kafka" aria-label="Permalink to &quot;Kafka&quot;">​</a></h3><p>运行<code>docker-compose.yml</code>即可</p><h3 id="elasticsearch" tabindex="-1">ElasticSearch <a class="header-anchor" href="#elasticsearch" aria-label="Permalink to &quot;ElasticSearch&quot;">​</a></h3><p>参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.14/run-elasticsearch-locally.html" target="_blank" rel="noreferrer">官网</a>安装即可</p><h2 id="前端部署" tabindex="-1">前端部署 <a class="header-anchor" href="#前端部署" aria-label="Permalink to &quot;前端部署&quot;">​</a></h2><p>使用自己的邮箱注册<a href="https://mp.weixin.qq.com/wxopen/waregister?action=step1&amp;source=mpregister&amp;token=&amp;lang=en_US" target="_blank" rel="noreferrer">微信小程序</a>，获取自己的AppId和AppSecret（注意保存好）</p><p><img src="'+d+'" alt="image-20240710162228146"></p><p>下载安装<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank" rel="noreferrer">微信开发者工具</a>，将<code>mp-weixin</code>导入，注意将AppId换成自己的。在安全中打开服务端口：</p><p><img src="'+l+`" alt="image-20240710162359741"></p><p>如果有需要，自行修改<code>config/config.js</code>中的后端接口配置：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 基础请求路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BASE_URL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;http://127.0.0.1:80&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 基础上传路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BASE_UPLOAD_URL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;http://127.0.0.1:80&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// webSocket基础路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> WebSocket_BASE_URL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ws://127.0.0.1/api/websocket&quot;</span></span></code></pre></div><h2 id="项目背景" tabindex="-1">项目背景 <a class="header-anchor" href="#项目背景" aria-label="Permalink to &quot;项目背景&quot;">​</a></h2><p>随着智能手机和高速互联网的普及，人们开始寻求更便捷的方式来获取信息和娱乐。有声书的出现使得人们可以在旅途中、跑步时、做家务时等各种场景下，以更加灵活的方式享受阅读。</p><p>在过去，有声书主要是由专业的演员朗读，制作成录音带或 CD。但随着数字化媒体的发展，听书软件应运而生，为用户提供了更多选择，包括自助出版的有声书和多样化的内容。</p><p>意义：</p><ol><li>便捷性：听书软件使得阅读不再局限于纸质书籍，用户可以通过手机等设备在任何时间、任何地点收听有声书，节省了携带实体书的麻烦。</li><li>多样化内容：听书软件提供了广泛的有声书选择，涵盖了各种类型的图书、小说、杂志、教育内容等。这样的多样性使得用户能够根据个人兴趣和需求选择内容。</li><li>阅读体验：通过专业的朗读演员和音效制作，听书软件可以提供更加生动、有趣的阅读体验，有助于吸引更多读者，尤其是那些不太喜欢阅读纸质书籍的人。</li><li>辅助功能：听书软件通常还具备一些辅助功能，如调整朗读速度、书签功能、字幕显示等，有助于提高可访问性，使得视力受损或其他障碍的用户也能轻松阅读。</li><li>支持作家和内容创作者：听书软件为作家和内容创作者提供了另一种传播作品的渠道，有助于扩大影响力和读者群。</li><li>学习工具：听书软件也可以用作学习工具，提供学术教材、外语学习材料等，帮助用户在学习过程中更好地理解和吸收知识。</li></ol><p>总的来说，听书软件的开发推动了阅读体验的数字化和个性化，为用户提供了更加便捷、多样化的阅读方式，也促进了作家和内容创作者的创作和传播。</p><h2 id="项目技术栈" tabindex="-1">项目技术栈 <a class="header-anchor" href="#项目技术栈" aria-label="Permalink to &quot;项目技术栈&quot;">​</a></h2><table tabindex="0"><thead><tr><th>技术或工具</th><th>描述</th></tr></thead><tbody><tr><td>SpringBoot</td><td>简化 Spring 应用的初始搭建以及开发过程</td></tr><tr><td>SpringCloud</td><td>基于 Spring Boot 实现的云原生应用开发工具；使用的技术包括 Spring Cloud Gateway、Spring Cloud Task 和 Spring Cloud Feign 等</td></tr><tr><td>MyBatis-Plus</td><td>持久层框架，依赖于 mybatis</td></tr><tr><td>Redis</td><td>内存做缓存</td></tr><tr><td>Redisson</td><td>基于 redis 的 Java 驻内存数据网格框架</td></tr><tr><td>MongoDB</td><td>分布式文件存储的数据库</td></tr><tr><td>Rabbitmq</td><td>消息中间件；大型分布式项目的标配；分布式事务最终一致性</td></tr><tr><td>ElasticSearch+Kibana+Logstash</td><td>全文检索服务器+可视化数据监控</td></tr><tr><td>ThreadPoolExecutor+CompletableFuture</td><td>线程池来实现异步操作，提高效率</td></tr><tr><td>xxl-Job</td><td>分布式定时任务调用中心</td></tr><tr><td>Knife4J/YAPI</td><td>Api 接口文档工具</td></tr><tr><td>MinIO</td><td>私有化对象存储集群，分布式文件存储</td></tr><tr><td>支付平台</td><td>微信支付</td></tr><tr><td>MySQL</td><td>关系型数据库；使用 shardingSphere-jdbc 进行读写分离、分库分表</td></tr><tr><td>Lombok</td><td>实体类中生成 get/set 的 jar 包</td></tr><tr><td>natapp</td><td>内网穿透</td></tr><tr><td>Docker</td><td>容器化技术；在生产环境中用于快速搭建环境，例如使用 <code>Docker run</code> 命令</td></tr><tr><td>Git</td><td>代码管理工具；用于拉取代码、提交、推送、合并和解决冲突</td></tr><tr><td>Cannal</td><td>阿里开源增量订阅组件，用于数据增量同步</td></tr><tr><td>Seata</td><td>阿里开源分布式事务解决方案</td></tr></tbody></table><p>前端技术栈</p><ul><li>UniApp</li><li>Vue3 全家桶</li><li>TypeScript</li><li>Grace-UI</li><li>Uni-UI</li><li>uniapp-axios-adapter</li></ul><h2 id="项目架构图" tabindex="-1">项目架构图 <a class="header-anchor" href="#项目架构图" aria-label="Permalink to &quot;项目架构图&quot;">​</a></h2><p><img src="`+n+'" alt=""></p>',44),h=[p];function k(g,m,b,u,_,q){return e(),a("div",null,h)}const x=t(c,[["render",k]]);export{y as __pageData,x as default};
